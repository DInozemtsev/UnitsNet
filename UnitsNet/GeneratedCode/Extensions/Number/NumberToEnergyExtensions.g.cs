//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/anjdreas/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\UnitClasses\MyUnit.extra.cs files to add code to generated unit classes.
//     Add Extensions\MyUnitExtensions.cs to decorate unit classes with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or unit classes.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (anjdreas@gmail.com).
// https://github.com/anjdreas/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToEnergy
{
    public static class NumberToEnergyExtensions
    {
        #region BritishThermalUnit

        /// <inheritdoc cref="Energy.FromBritishThermalUnits(double)"/>
        public static Energy BritishThermalUnits(this int value) => Energy.FromBritishThermalUnits(value);

        /// <inheritdoc cref="Energy.FromBritishThermalUnits(double?)"/>
        public static Energy? BritishThermalUnits(this int? value) => Energy.FromBritishThermalUnits(value);

        /// <inheritdoc cref="Energy.FromBritishThermalUnits(double)"/>
        public static Energy BritishThermalUnits(this long value) => Energy.FromBritishThermalUnits(value);

        /// <inheritdoc cref="Energy.FromBritishThermalUnits(double?)"/>
        public static Energy? BritishThermalUnits(this long? value) => Energy.FromBritishThermalUnits(value);

        /// <inheritdoc cref="Energy.FromBritishThermalUnits(double)"/>
        public static Energy BritishThermalUnits(this double value) => Energy.FromBritishThermalUnits(value);

        /// <inheritdoc cref="Energy.FromBritishThermalUnits(double?)"/>
        public static Energy? BritishThermalUnits(this double? value) => Energy.FromBritishThermalUnits(value);

        /// <inheritdoc cref="Energy.FromBritishThermalUnits(double)"/>
        public static Energy BritishThermalUnits(this float value) => Energy.FromBritishThermalUnits(value);

        /// <inheritdoc cref="Energy.FromBritishThermalUnits(double?)"/>
        public static Energy? BritishThermalUnits(this float? value) => Energy.FromBritishThermalUnits(value);

        /// <inheritdoc cref="Energy.FromBritishThermalUnits(double)"/>
        public static Energy BritishThermalUnits(this decimal value) => Energy.FromBritishThermalUnits(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromBritishThermalUnits(double?)"/>
        public static Energy? BritishThermalUnits(this decimal? value) => Energy.FromBritishThermalUnits(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Calorie

        /// <inheritdoc cref="Energy.FromCalories(double)"/>
        public static Energy Calories(this int value) => Energy.FromCalories(value);

        /// <inheritdoc cref="Energy.FromCalories(double?)"/>
        public static Energy? Calories(this int? value) => Energy.FromCalories(value);

        /// <inheritdoc cref="Energy.FromCalories(double)"/>
        public static Energy Calories(this long value) => Energy.FromCalories(value);

        /// <inheritdoc cref="Energy.FromCalories(double?)"/>
        public static Energy? Calories(this long? value) => Energy.FromCalories(value);

        /// <inheritdoc cref="Energy.FromCalories(double)"/>
        public static Energy Calories(this double value) => Energy.FromCalories(value);

        /// <inheritdoc cref="Energy.FromCalories(double?)"/>
        public static Energy? Calories(this double? value) => Energy.FromCalories(value);

        /// <inheritdoc cref="Energy.FromCalories(double)"/>
        public static Energy Calories(this float value) => Energy.FromCalories(value);

        /// <inheritdoc cref="Energy.FromCalories(double?)"/>
        public static Energy? Calories(this float? value) => Energy.FromCalories(value);

        /// <inheritdoc cref="Energy.FromCalories(double)"/>
        public static Energy Calories(this decimal value) => Energy.FromCalories(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromCalories(double?)"/>
        public static Energy? Calories(this decimal? value) => Energy.FromCalories(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region DecaeuTherm

        /// <inheritdoc cref="Energy.FromDecaeuTherms(double)"/>
        public static Energy DecaeuTherms(this int value) => Energy.FromDecaeuTherms(value);

        /// <inheritdoc cref="Energy.FromDecaeuTherms(double?)"/>
        public static Energy? DecaeuTherms(this int? value) => Energy.FromDecaeuTherms(value);

        /// <inheritdoc cref="Energy.FromDecaeuTherms(double)"/>
        public static Energy DecaeuTherms(this long value) => Energy.FromDecaeuTherms(value);

        /// <inheritdoc cref="Energy.FromDecaeuTherms(double?)"/>
        public static Energy? DecaeuTherms(this long? value) => Energy.FromDecaeuTherms(value);

        /// <inheritdoc cref="Energy.FromDecaeuTherms(double)"/>
        public static Energy DecaeuTherms(this double value) => Energy.FromDecaeuTherms(value);

        /// <inheritdoc cref="Energy.FromDecaeuTherms(double?)"/>
        public static Energy? DecaeuTherms(this double? value) => Energy.FromDecaeuTherms(value);

        /// <inheritdoc cref="Energy.FromDecaeuTherms(double)"/>
        public static Energy DecaeuTherms(this float value) => Energy.FromDecaeuTherms(value);

        /// <inheritdoc cref="Energy.FromDecaeuTherms(double?)"/>
        public static Energy? DecaeuTherms(this float? value) => Energy.FromDecaeuTherms(value);

        /// <inheritdoc cref="Energy.FromDecaeuTherms(double)"/>
        public static Energy DecaeuTherms(this decimal value) => Energy.FromDecaeuTherms(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromDecaeuTherms(double?)"/>
        public static Energy? DecaeuTherms(this decimal? value) => Energy.FromDecaeuTherms(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region DecaimperialTherm

        /// <inheritdoc cref="Energy.FromDecaimperialTherms(double)"/>
        public static Energy DecaimperialTherms(this int value) => Energy.FromDecaimperialTherms(value);

        /// <inheritdoc cref="Energy.FromDecaimperialTherms(double?)"/>
        public static Energy? DecaimperialTherms(this int? value) => Energy.FromDecaimperialTherms(value);

        /// <inheritdoc cref="Energy.FromDecaimperialTherms(double)"/>
        public static Energy DecaimperialTherms(this long value) => Energy.FromDecaimperialTherms(value);

        /// <inheritdoc cref="Energy.FromDecaimperialTherms(double?)"/>
        public static Energy? DecaimperialTherms(this long? value) => Energy.FromDecaimperialTherms(value);

        /// <inheritdoc cref="Energy.FromDecaimperialTherms(double)"/>
        public static Energy DecaimperialTherms(this double value) => Energy.FromDecaimperialTherms(value);

        /// <inheritdoc cref="Energy.FromDecaimperialTherms(double?)"/>
        public static Energy? DecaimperialTherms(this double? value) => Energy.FromDecaimperialTherms(value);

        /// <inheritdoc cref="Energy.FromDecaimperialTherms(double)"/>
        public static Energy DecaimperialTherms(this float value) => Energy.FromDecaimperialTherms(value);

        /// <inheritdoc cref="Energy.FromDecaimperialTherms(double?)"/>
        public static Energy? DecaimperialTherms(this float? value) => Energy.FromDecaimperialTherms(value);

        /// <inheritdoc cref="Energy.FromDecaimperialTherms(double)"/>
        public static Energy DecaimperialTherms(this decimal value) => Energy.FromDecaimperialTherms(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromDecaimperialTherms(double?)"/>
        public static Energy? DecaimperialTherms(this decimal? value) => Energy.FromDecaimperialTherms(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region DecausTherm

        /// <inheritdoc cref="Energy.FromDecausTherms(double)"/>
        public static Energy DecausTherms(this int value) => Energy.FromDecausTherms(value);

        /// <inheritdoc cref="Energy.FromDecausTherms(double?)"/>
        public static Energy? DecausTherms(this int? value) => Energy.FromDecausTherms(value);

        /// <inheritdoc cref="Energy.FromDecausTherms(double)"/>
        public static Energy DecausTherms(this long value) => Energy.FromDecausTherms(value);

        /// <inheritdoc cref="Energy.FromDecausTherms(double?)"/>
        public static Energy? DecausTherms(this long? value) => Energy.FromDecausTherms(value);

        /// <inheritdoc cref="Energy.FromDecausTherms(double)"/>
        public static Energy DecausTherms(this double value) => Energy.FromDecausTherms(value);

        /// <inheritdoc cref="Energy.FromDecausTherms(double?)"/>
        public static Energy? DecausTherms(this double? value) => Energy.FromDecausTherms(value);

        /// <inheritdoc cref="Energy.FromDecausTherms(double)"/>
        public static Energy DecausTherms(this float value) => Energy.FromDecausTherms(value);

        /// <inheritdoc cref="Energy.FromDecausTherms(double?)"/>
        public static Energy? DecausTherms(this float? value) => Energy.FromDecausTherms(value);

        /// <inheritdoc cref="Energy.FromDecausTherms(double)"/>
        public static Energy DecausTherms(this decimal value) => Energy.FromDecausTherms(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromDecausTherms(double?)"/>
        public static Energy? DecausTherms(this decimal? value) => Energy.FromDecausTherms(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region ElectronVolt

        /// <inheritdoc cref="Energy.FromElectronVolts(double)"/>
        public static Energy ElectronVolts(this int value) => Energy.FromElectronVolts(value);

        /// <inheritdoc cref="Energy.FromElectronVolts(double?)"/>
        public static Energy? ElectronVolts(this int? value) => Energy.FromElectronVolts(value);

        /// <inheritdoc cref="Energy.FromElectronVolts(double)"/>
        public static Energy ElectronVolts(this long value) => Energy.FromElectronVolts(value);

        /// <inheritdoc cref="Energy.FromElectronVolts(double?)"/>
        public static Energy? ElectronVolts(this long? value) => Energy.FromElectronVolts(value);

        /// <inheritdoc cref="Energy.FromElectronVolts(double)"/>
        public static Energy ElectronVolts(this double value) => Energy.FromElectronVolts(value);

        /// <inheritdoc cref="Energy.FromElectronVolts(double?)"/>
        public static Energy? ElectronVolts(this double? value) => Energy.FromElectronVolts(value);

        /// <inheritdoc cref="Energy.FromElectronVolts(double)"/>
        public static Energy ElectronVolts(this float value) => Energy.FromElectronVolts(value);

        /// <inheritdoc cref="Energy.FromElectronVolts(double?)"/>
        public static Energy? ElectronVolts(this float? value) => Energy.FromElectronVolts(value);

        /// <inheritdoc cref="Energy.FromElectronVolts(double)"/>
        public static Energy ElectronVolts(this decimal value) => Energy.FromElectronVolts(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromElectronVolts(double?)"/>
        public static Energy? ElectronVolts(this decimal? value) => Energy.FromElectronVolts(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Erg

        /// <inheritdoc cref="Energy.FromErgs(double)"/>
        public static Energy Ergs(this int value) => Energy.FromErgs(value);

        /// <inheritdoc cref="Energy.FromErgs(double?)"/>
        public static Energy? Ergs(this int? value) => Energy.FromErgs(value);

        /// <inheritdoc cref="Energy.FromErgs(double)"/>
        public static Energy Ergs(this long value) => Energy.FromErgs(value);

        /// <inheritdoc cref="Energy.FromErgs(double?)"/>
        public static Energy? Ergs(this long? value) => Energy.FromErgs(value);

        /// <inheritdoc cref="Energy.FromErgs(double)"/>
        public static Energy Ergs(this double value) => Energy.FromErgs(value);

        /// <inheritdoc cref="Energy.FromErgs(double?)"/>
        public static Energy? Ergs(this double? value) => Energy.FromErgs(value);

        /// <inheritdoc cref="Energy.FromErgs(double)"/>
        public static Energy Ergs(this float value) => Energy.FromErgs(value);

        /// <inheritdoc cref="Energy.FromErgs(double?)"/>
        public static Energy? Ergs(this float? value) => Energy.FromErgs(value);

        /// <inheritdoc cref="Energy.FromErgs(double)"/>
        public static Energy Ergs(this decimal value) => Energy.FromErgs(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromErgs(double?)"/>
        public static Energy? Ergs(this decimal? value) => Energy.FromErgs(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region EuTherm

        /// <inheritdoc cref="Energy.FromEuTherms(double)"/>
        public static Energy EuTherms(this int value) => Energy.FromEuTherms(value);

        /// <inheritdoc cref="Energy.FromEuTherms(double?)"/>
        public static Energy? EuTherms(this int? value) => Energy.FromEuTherms(value);

        /// <inheritdoc cref="Energy.FromEuTherms(double)"/>
        public static Energy EuTherms(this long value) => Energy.FromEuTherms(value);

        /// <inheritdoc cref="Energy.FromEuTherms(double?)"/>
        public static Energy? EuTherms(this long? value) => Energy.FromEuTherms(value);

        /// <inheritdoc cref="Energy.FromEuTherms(double)"/>
        public static Energy EuTherms(this double value) => Energy.FromEuTherms(value);

        /// <inheritdoc cref="Energy.FromEuTherms(double?)"/>
        public static Energy? EuTherms(this double? value) => Energy.FromEuTherms(value);

        /// <inheritdoc cref="Energy.FromEuTherms(double)"/>
        public static Energy EuTherms(this float value) => Energy.FromEuTherms(value);

        /// <inheritdoc cref="Energy.FromEuTherms(double?)"/>
        public static Energy? EuTherms(this float? value) => Energy.FromEuTherms(value);

        /// <inheritdoc cref="Energy.FromEuTherms(double)"/>
        public static Energy EuTherms(this decimal value) => Energy.FromEuTherms(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromEuTherms(double?)"/>
        public static Energy? EuTherms(this decimal? value) => Energy.FromEuTherms(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region FootPound

        /// <inheritdoc cref="Energy.FromFootPounds(double)"/>
        public static Energy FootPounds(this int value) => Energy.FromFootPounds(value);

        /// <inheritdoc cref="Energy.FromFootPounds(double?)"/>
        public static Energy? FootPounds(this int? value) => Energy.FromFootPounds(value);

        /// <inheritdoc cref="Energy.FromFootPounds(double)"/>
        public static Energy FootPounds(this long value) => Energy.FromFootPounds(value);

        /// <inheritdoc cref="Energy.FromFootPounds(double?)"/>
        public static Energy? FootPounds(this long? value) => Energy.FromFootPounds(value);

        /// <inheritdoc cref="Energy.FromFootPounds(double)"/>
        public static Energy FootPounds(this double value) => Energy.FromFootPounds(value);

        /// <inheritdoc cref="Energy.FromFootPounds(double?)"/>
        public static Energy? FootPounds(this double? value) => Energy.FromFootPounds(value);

        /// <inheritdoc cref="Energy.FromFootPounds(double)"/>
        public static Energy FootPounds(this float value) => Energy.FromFootPounds(value);

        /// <inheritdoc cref="Energy.FromFootPounds(double?)"/>
        public static Energy? FootPounds(this float? value) => Energy.FromFootPounds(value);

        /// <inheritdoc cref="Energy.FromFootPounds(double)"/>
        public static Energy FootPounds(this decimal value) => Energy.FromFootPounds(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromFootPounds(double?)"/>
        public static Energy? FootPounds(this decimal? value) => Energy.FromFootPounds(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region GigawattHour

        /// <inheritdoc cref="Energy.FromGigawattHours(double)"/>
        public static Energy GigawattHours(this int value) => Energy.FromGigawattHours(value);

        /// <inheritdoc cref="Energy.FromGigawattHours(double?)"/>
        public static Energy? GigawattHours(this int? value) => Energy.FromGigawattHours(value);

        /// <inheritdoc cref="Energy.FromGigawattHours(double)"/>
        public static Energy GigawattHours(this long value) => Energy.FromGigawattHours(value);

        /// <inheritdoc cref="Energy.FromGigawattHours(double?)"/>
        public static Energy? GigawattHours(this long? value) => Energy.FromGigawattHours(value);

        /// <inheritdoc cref="Energy.FromGigawattHours(double)"/>
        public static Energy GigawattHours(this double value) => Energy.FromGigawattHours(value);

        /// <inheritdoc cref="Energy.FromGigawattHours(double?)"/>
        public static Energy? GigawattHours(this double? value) => Energy.FromGigawattHours(value);

        /// <inheritdoc cref="Energy.FromGigawattHours(double)"/>
        public static Energy GigawattHours(this float value) => Energy.FromGigawattHours(value);

        /// <inheritdoc cref="Energy.FromGigawattHours(double?)"/>
        public static Energy? GigawattHours(this float? value) => Energy.FromGigawattHours(value);

        /// <inheritdoc cref="Energy.FromGigawattHours(double)"/>
        public static Energy GigawattHours(this decimal value) => Energy.FromGigawattHours(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromGigawattHours(double?)"/>
        public static Energy? GigawattHours(this decimal? value) => Energy.FromGigawattHours(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region ImperialTherm

        /// <inheritdoc cref="Energy.FromImperialTherms(double)"/>
        public static Energy ImperialTherms(this int value) => Energy.FromImperialTherms(value);

        /// <inheritdoc cref="Energy.FromImperialTherms(double?)"/>
        public static Energy? ImperialTherms(this int? value) => Energy.FromImperialTherms(value);

        /// <inheritdoc cref="Energy.FromImperialTherms(double)"/>
        public static Energy ImperialTherms(this long value) => Energy.FromImperialTherms(value);

        /// <inheritdoc cref="Energy.FromImperialTherms(double?)"/>
        public static Energy? ImperialTherms(this long? value) => Energy.FromImperialTherms(value);

        /// <inheritdoc cref="Energy.FromImperialTherms(double)"/>
        public static Energy ImperialTherms(this double value) => Energy.FromImperialTherms(value);

        /// <inheritdoc cref="Energy.FromImperialTherms(double?)"/>
        public static Energy? ImperialTherms(this double? value) => Energy.FromImperialTherms(value);

        /// <inheritdoc cref="Energy.FromImperialTherms(double)"/>
        public static Energy ImperialTherms(this float value) => Energy.FromImperialTherms(value);

        /// <inheritdoc cref="Energy.FromImperialTherms(double?)"/>
        public static Energy? ImperialTherms(this float? value) => Energy.FromImperialTherms(value);

        /// <inheritdoc cref="Energy.FromImperialTherms(double)"/>
        public static Energy ImperialTherms(this decimal value) => Energy.FromImperialTherms(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromImperialTherms(double?)"/>
        public static Energy? ImperialTherms(this decimal? value) => Energy.FromImperialTherms(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Joule

        /// <inheritdoc cref="Energy.FromJoules(double)"/>
        public static Energy Joules(this int value) => Energy.FromJoules(value);

        /// <inheritdoc cref="Energy.FromJoules(double?)"/>
        public static Energy? Joules(this int? value) => Energy.FromJoules(value);

        /// <inheritdoc cref="Energy.FromJoules(double)"/>
        public static Energy Joules(this long value) => Energy.FromJoules(value);

        /// <inheritdoc cref="Energy.FromJoules(double?)"/>
        public static Energy? Joules(this long? value) => Energy.FromJoules(value);

        /// <inheritdoc cref="Energy.FromJoules(double)"/>
        public static Energy Joules(this double value) => Energy.FromJoules(value);

        /// <inheritdoc cref="Energy.FromJoules(double?)"/>
        public static Energy? Joules(this double? value) => Energy.FromJoules(value);

        /// <inheritdoc cref="Energy.FromJoules(double)"/>
        public static Energy Joules(this float value) => Energy.FromJoules(value);

        /// <inheritdoc cref="Energy.FromJoules(double?)"/>
        public static Energy? Joules(this float? value) => Energy.FromJoules(value);

        /// <inheritdoc cref="Energy.FromJoules(double)"/>
        public static Energy Joules(this decimal value) => Energy.FromJoules(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromJoules(double?)"/>
        public static Energy? Joules(this decimal? value) => Energy.FromJoules(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Kilocalorie

        /// <inheritdoc cref="Energy.FromKilocalories(double)"/>
        public static Energy Kilocalories(this int value) => Energy.FromKilocalories(value);

        /// <inheritdoc cref="Energy.FromKilocalories(double?)"/>
        public static Energy? Kilocalories(this int? value) => Energy.FromKilocalories(value);

        /// <inheritdoc cref="Energy.FromKilocalories(double)"/>
        public static Energy Kilocalories(this long value) => Energy.FromKilocalories(value);

        /// <inheritdoc cref="Energy.FromKilocalories(double?)"/>
        public static Energy? Kilocalories(this long? value) => Energy.FromKilocalories(value);

        /// <inheritdoc cref="Energy.FromKilocalories(double)"/>
        public static Energy Kilocalories(this double value) => Energy.FromKilocalories(value);

        /// <inheritdoc cref="Energy.FromKilocalories(double?)"/>
        public static Energy? Kilocalories(this double? value) => Energy.FromKilocalories(value);

        /// <inheritdoc cref="Energy.FromKilocalories(double)"/>
        public static Energy Kilocalories(this float value) => Energy.FromKilocalories(value);

        /// <inheritdoc cref="Energy.FromKilocalories(double?)"/>
        public static Energy? Kilocalories(this float? value) => Energy.FromKilocalories(value);

        /// <inheritdoc cref="Energy.FromKilocalories(double)"/>
        public static Energy Kilocalories(this decimal value) => Energy.FromKilocalories(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromKilocalories(double?)"/>
        public static Energy? Kilocalories(this decimal? value) => Energy.FromKilocalories(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Kilojoule

        /// <inheritdoc cref="Energy.FromKilojoules(double)"/>
        public static Energy Kilojoules(this int value) => Energy.FromKilojoules(value);

        /// <inheritdoc cref="Energy.FromKilojoules(double?)"/>
        public static Energy? Kilojoules(this int? value) => Energy.FromKilojoules(value);

        /// <inheritdoc cref="Energy.FromKilojoules(double)"/>
        public static Energy Kilojoules(this long value) => Energy.FromKilojoules(value);

        /// <inheritdoc cref="Energy.FromKilojoules(double?)"/>
        public static Energy? Kilojoules(this long? value) => Energy.FromKilojoules(value);

        /// <inheritdoc cref="Energy.FromKilojoules(double)"/>
        public static Energy Kilojoules(this double value) => Energy.FromKilojoules(value);

        /// <inheritdoc cref="Energy.FromKilojoules(double?)"/>
        public static Energy? Kilojoules(this double? value) => Energy.FromKilojoules(value);

        /// <inheritdoc cref="Energy.FromKilojoules(double)"/>
        public static Energy Kilojoules(this float value) => Energy.FromKilojoules(value);

        /// <inheritdoc cref="Energy.FromKilojoules(double?)"/>
        public static Energy? Kilojoules(this float? value) => Energy.FromKilojoules(value);

        /// <inheritdoc cref="Energy.FromKilojoules(double)"/>
        public static Energy Kilojoules(this decimal value) => Energy.FromKilojoules(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromKilojoules(double?)"/>
        public static Energy? Kilojoules(this decimal? value) => Energy.FromKilojoules(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilowattHour

        /// <inheritdoc cref="Energy.FromKilowattHours(double)"/>
        public static Energy KilowattHours(this int value) => Energy.FromKilowattHours(value);

        /// <inheritdoc cref="Energy.FromKilowattHours(double?)"/>
        public static Energy? KilowattHours(this int? value) => Energy.FromKilowattHours(value);

        /// <inheritdoc cref="Energy.FromKilowattHours(double)"/>
        public static Energy KilowattHours(this long value) => Energy.FromKilowattHours(value);

        /// <inheritdoc cref="Energy.FromKilowattHours(double?)"/>
        public static Energy? KilowattHours(this long? value) => Energy.FromKilowattHours(value);

        /// <inheritdoc cref="Energy.FromKilowattHours(double)"/>
        public static Energy KilowattHours(this double value) => Energy.FromKilowattHours(value);

        /// <inheritdoc cref="Energy.FromKilowattHours(double?)"/>
        public static Energy? KilowattHours(this double? value) => Energy.FromKilowattHours(value);

        /// <inheritdoc cref="Energy.FromKilowattHours(double)"/>
        public static Energy KilowattHours(this float value) => Energy.FromKilowattHours(value);

        /// <inheritdoc cref="Energy.FromKilowattHours(double?)"/>
        public static Energy? KilowattHours(this float? value) => Energy.FromKilowattHours(value);

        /// <inheritdoc cref="Energy.FromKilowattHours(double)"/>
        public static Energy KilowattHours(this decimal value) => Energy.FromKilowattHours(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromKilowattHours(double?)"/>
        public static Energy? KilowattHours(this decimal? value) => Energy.FromKilowattHours(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Megajoule

        /// <inheritdoc cref="Energy.FromMegajoules(double)"/>
        public static Energy Megajoules(this int value) => Energy.FromMegajoules(value);

        /// <inheritdoc cref="Energy.FromMegajoules(double?)"/>
        public static Energy? Megajoules(this int? value) => Energy.FromMegajoules(value);

        /// <inheritdoc cref="Energy.FromMegajoules(double)"/>
        public static Energy Megajoules(this long value) => Energy.FromMegajoules(value);

        /// <inheritdoc cref="Energy.FromMegajoules(double?)"/>
        public static Energy? Megajoules(this long? value) => Energy.FromMegajoules(value);

        /// <inheritdoc cref="Energy.FromMegajoules(double)"/>
        public static Energy Megajoules(this double value) => Energy.FromMegajoules(value);

        /// <inheritdoc cref="Energy.FromMegajoules(double?)"/>
        public static Energy? Megajoules(this double? value) => Energy.FromMegajoules(value);

        /// <inheritdoc cref="Energy.FromMegajoules(double)"/>
        public static Energy Megajoules(this float value) => Energy.FromMegajoules(value);

        /// <inheritdoc cref="Energy.FromMegajoules(double?)"/>
        public static Energy? Megajoules(this float? value) => Energy.FromMegajoules(value);

        /// <inheritdoc cref="Energy.FromMegajoules(double)"/>
        public static Energy Megajoules(this decimal value) => Energy.FromMegajoules(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromMegajoules(double?)"/>
        public static Energy? Megajoules(this decimal? value) => Energy.FromMegajoules(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MegawattHour

        /// <inheritdoc cref="Energy.FromMegawattHours(double)"/>
        public static Energy MegawattHours(this int value) => Energy.FromMegawattHours(value);

        /// <inheritdoc cref="Energy.FromMegawattHours(double?)"/>
        public static Energy? MegawattHours(this int? value) => Energy.FromMegawattHours(value);

        /// <inheritdoc cref="Energy.FromMegawattHours(double)"/>
        public static Energy MegawattHours(this long value) => Energy.FromMegawattHours(value);

        /// <inheritdoc cref="Energy.FromMegawattHours(double?)"/>
        public static Energy? MegawattHours(this long? value) => Energy.FromMegawattHours(value);

        /// <inheritdoc cref="Energy.FromMegawattHours(double)"/>
        public static Energy MegawattHours(this double value) => Energy.FromMegawattHours(value);

        /// <inheritdoc cref="Energy.FromMegawattHours(double?)"/>
        public static Energy? MegawattHours(this double? value) => Energy.FromMegawattHours(value);

        /// <inheritdoc cref="Energy.FromMegawattHours(double)"/>
        public static Energy MegawattHours(this float value) => Energy.FromMegawattHours(value);

        /// <inheritdoc cref="Energy.FromMegawattHours(double?)"/>
        public static Energy? MegawattHours(this float? value) => Energy.FromMegawattHours(value);

        /// <inheritdoc cref="Energy.FromMegawattHours(double)"/>
        public static Energy MegawattHours(this decimal value) => Energy.FromMegawattHours(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromMegawattHours(double?)"/>
        public static Energy? MegawattHours(this decimal? value) => Energy.FromMegawattHours(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region UsTherm

        /// <inheritdoc cref="Energy.FromUsTherms(double)"/>
        public static Energy UsTherms(this int value) => Energy.FromUsTherms(value);

        /// <inheritdoc cref="Energy.FromUsTherms(double?)"/>
        public static Energy? UsTherms(this int? value) => Energy.FromUsTherms(value);

        /// <inheritdoc cref="Energy.FromUsTherms(double)"/>
        public static Energy UsTherms(this long value) => Energy.FromUsTherms(value);

        /// <inheritdoc cref="Energy.FromUsTherms(double?)"/>
        public static Energy? UsTherms(this long? value) => Energy.FromUsTherms(value);

        /// <inheritdoc cref="Energy.FromUsTherms(double)"/>
        public static Energy UsTherms(this double value) => Energy.FromUsTherms(value);

        /// <inheritdoc cref="Energy.FromUsTherms(double?)"/>
        public static Energy? UsTherms(this double? value) => Energy.FromUsTherms(value);

        /// <inheritdoc cref="Energy.FromUsTherms(double)"/>
        public static Energy UsTherms(this float value) => Energy.FromUsTherms(value);

        /// <inheritdoc cref="Energy.FromUsTherms(double?)"/>
        public static Energy? UsTherms(this float? value) => Energy.FromUsTherms(value);

        /// <inheritdoc cref="Energy.FromUsTherms(double)"/>
        public static Energy UsTherms(this decimal value) => Energy.FromUsTherms(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromUsTherms(double?)"/>
        public static Energy? UsTherms(this decimal? value) => Energy.FromUsTherms(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region WattHour

        /// <inheritdoc cref="Energy.FromWattHours(double)"/>
        public static Energy WattHours(this int value) => Energy.FromWattHours(value);

        /// <inheritdoc cref="Energy.FromWattHours(double?)"/>
        public static Energy? WattHours(this int? value) => Energy.FromWattHours(value);

        /// <inheritdoc cref="Energy.FromWattHours(double)"/>
        public static Energy WattHours(this long value) => Energy.FromWattHours(value);

        /// <inheritdoc cref="Energy.FromWattHours(double?)"/>
        public static Energy? WattHours(this long? value) => Energy.FromWattHours(value);

        /// <inheritdoc cref="Energy.FromWattHours(double)"/>
        public static Energy WattHours(this double value) => Energy.FromWattHours(value);

        /// <inheritdoc cref="Energy.FromWattHours(double?)"/>
        public static Energy? WattHours(this double? value) => Energy.FromWattHours(value);

        /// <inheritdoc cref="Energy.FromWattHours(double)"/>
        public static Energy WattHours(this float value) => Energy.FromWattHours(value);

        /// <inheritdoc cref="Energy.FromWattHours(double?)"/>
        public static Energy? WattHours(this float? value) => Energy.FromWattHours(value);

        /// <inheritdoc cref="Energy.FromWattHours(double)"/>
        public static Energy WattHours(this decimal value) => Energy.FromWattHours(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromWattHours(double?)"/>
        public static Energy? WattHours(this decimal? value) => Energy.FromWattHours(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

    }
}
#endif
